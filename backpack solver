import random

class Individual:
    def __init__(self, genome, fitness=0):
        self.genome = genome
        self.fitness = fitness

def calculate_fitness(individual, weights, values, capacity):
    total_weight = sum(individual.genome[i] * weights[i] for i in range(len(weights)))
    total_value = sum(individual.genome[i] * values[i] for i in range(len(values)))
    if total_weight > capacity:
        return 0
    return total_value

def crossover(parent1, parent2):
    point = random.randint(0, len(parent1.genome) - 1)
    child1 = Individual(parent1.genome[:point] + parent2.genome[point:])
    child2 = Individual(parent2.genome[:point] + parent1.genome[point:])
    return child1, child2

def mutate(individual):
    index = random.randint(0, len(individual.genome) - 1)
    individual.genome[index] = 1 - individual.genome[index]

def genetic_algorithm(weights, values, capacity, population_size=100, generations=100):
    population = [Individual([random.randint(0, 1) for _ in range(len(weights))]) for _ in range(population_size)]
    
    for generation in range(generations):
        for individual in population:
            individual.fitness = calculate_fitness(individual, weights, values, capacity)
        
        population.sort(key=lambda x: x.fitness, reverse=True)
        next_population = population[:10]

        while len(next_population) < population_size:
            parent1, parent2 = random.choices(population[:50], k=2)
            child1, child2 = crossover(parent1, parent2)
            if random.random() < 0.1:
                mutate(child1)
            if random.random() < 0.1:
                mutate(child2)
            next_population.extend([child1, child2])

        population = next_population
        best = max(population, key=lambda x: x.fitness)
        print(f"Generation {generation}, Best fitness: {best.fitness}")

    return max(population, key=lambda x: x.fitness)

weights = [10, 20, 30, 40, 50]
values = [60, 100, 120, 140, 160]
capacity = 100

best_solution = genetic_algorithm(weights, values, capacity)
print(f"Best solution: {best_solution.genome} with value: {best_solution.fitness}")
